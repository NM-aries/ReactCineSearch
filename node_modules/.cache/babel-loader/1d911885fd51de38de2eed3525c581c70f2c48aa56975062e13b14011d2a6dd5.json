{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\CineSearch\\\\src\\\\context\\\\MovieContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieContext = /*#__PURE__*/createContext();\nexport const useMovies = () => {\n  _s();\n  const context = useContext(MovieContext);\n  if (!context) {\n    throw new Error('useMovies must be used within a MovieProvider');\n  }\n  return context;\n};\n_s(useMovies, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MovieProvider = ({\n  children\n}) => {\n  _s2();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [topRatedMovies, setTopRatedMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const API_KEY = '5d72a0ee3d073c888b3214a716ffb9e8'; // Your TMDB API Key\n  const BASE_URL = 'https://api.themoviedb.org/3';\n  const fetchMovies = async endpoint => {\n    try {\n      const response = await axios.get(`${BASE_URL}${endpoint}?api_key=${API_KEY}&language=en-US&page=1`);\n      return response.data.results;\n    } catch (err) {\n      console.error('Error fetching movies:', err);\n      setError('Failed to fetch movies');\n      return [];\n    }\n  };\n  const searchMovies = async query => {\n    setLoading(true);\n    try {\n      const response = await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1&include_adult=false`);\n      setLoading(false);\n      return response.data.results;\n    } catch (err) {\n      console.error('Error searching movies:', err);\n      setError('Failed to search movies');\n      setLoading(false);\n      return [];\n    }\n  };\n  const getMovieDetails = async movieId => {\n    try {\n      const response = await axios.get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US&append_to_response=videos,credits,similar`);\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching movie details:', err);\n      setError('Failed to fetch movie details');\n      return null;\n    }\n  };\n  useEffect(() => {\n    const loadInitialData = async () => {\n      setLoading(true);\n      const [trending, popular, topRated] = await Promise.all([fetchMovies('/trending/movie/week'), fetchMovies('/movie/popular'), fetchMovies('/movie/top_rated')]);\n      setTrendingMovies(trending);\n      setPopularMovies(popular);\n      setTopRatedMovies(topRated);\n      setLoading(false);\n    };\n    loadInitialData();\n  }, []);\n  const value = {\n    trendingMovies,\n    popularMovies,\n    topRatedMovies,\n    loading,\n    error,\n    searchMovies,\n    getMovieDetails,\n    setError\n  };\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s2(MovieProvider, \"4N3P+pqSvcymYhqQLLpXbsG6dxQ=\");\n_c = MovieProvider;\nvar _c;\n$RefreshReg$(_c, \"MovieProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","MovieContext","useMovies","_s","context","Error","MovieProvider","children","_s2","trendingMovies","setTrendingMovies","popularMovies","setPopularMovies","topRatedMovies","setTopRatedMovies","loading","setLoading","error","setError","API_KEY","BASE_URL","fetchMovies","endpoint","response","get","data","results","err","console","searchMovies","query","encodeURIComponent","getMovieDetails","movieId","loadInitialData","trending","popular","topRated","Promise","all","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Development/CineSearch/src/context/MovieContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst MovieContext = createContext();\r\n\r\nexport const useMovies = () => {\r\n  const context = useContext(MovieContext);\r\n  if (!context) {\r\n    throw new Error('useMovies must be used within a MovieProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const MovieProvider = ({ children }) => {\r\n  const [trendingMovies, setTrendingMovies] = useState([]);\r\n  const [popularMovies, setPopularMovies] = useState([]);\r\n  const [topRatedMovies, setTopRatedMovies] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const API_KEY = '5d72a0ee3d073c888b3214a716ffb9e8'; // Your TMDB API Key\r\n  const BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\n  const fetchMovies = async (endpoint) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}${endpoint}?api_key=${API_KEY}&language=en-US&page=1`);\r\n      return response.data.results;\r\n    } catch (err) {\r\n      console.error('Error fetching movies:', err);\r\n      setError('Failed to fetch movies');\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const searchMovies = async (query) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(\r\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${encodeURIComponent(query)}&page=1&include_adult=false`\r\n      );\r\n      setLoading(false);\r\n      return response.data.results;\r\n    } catch (err) {\r\n      console.error('Error searching movies:', err);\r\n      setError('Failed to search movies');\r\n      setLoading(false);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getMovieDetails = async (movieId) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US&append_to_response=videos,credits,similar`\r\n      );\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching movie details:', err);\r\n      setError('Failed to fetch movie details');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n      setLoading(true);\r\n      const [trending, popular, topRated] = await Promise.all([\r\n        fetchMovies('/trending/movie/week'),\r\n        fetchMovies('/movie/popular'),\r\n        fetchMovies('/movie/top_rated')\r\n      ]);\r\n      \r\n      setTrendingMovies(trending);\r\n      setPopularMovies(popular);\r\n      setTopRatedMovies(topRated);\r\n      setLoading(false);\r\n    };\r\n\r\n    loadInitialData();\r\n  }, []);\r\n\r\n  const value = {\r\n    trendingMovies,\r\n    popularMovies,\r\n    topRatedMovies,\r\n    loading,\r\n    error,\r\n    searchMovies,\r\n    getMovieDetails,\r\n    setError\r\n  };\r\n\r\n  return (\r\n    <MovieContext.Provider value={value}>\r\n      {children}\r\n    </MovieContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}